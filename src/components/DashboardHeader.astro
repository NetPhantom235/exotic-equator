---
interface Props {
  title: string;
}
---

<header class="dashboard-header">
  <div class="header-content">
    <h1 class="header-title">Panel de Control</h1>
    <div class="header-actions">
      <button
        class="header-button"
        id="refreshButton"
        aria-label="Actualizar pÃ¡gina"
        role="button"
        tabindex="0"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="icon"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          aria-hidden="true"
          role="img"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
          ></path>
        </svg>
        <span class="button-text">Actualizar</span>
      </button>
    </div>
  </div>
</header>

<style>
  .dashboard-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    background: var(--background-secondary);
    border-bottom: 1px solid var(--border-color);
    box-shadow: 0 2px 8px 0 rgba(0, 0, 0, 0.12);
    z-index: 2;
    position: relative;
  }
  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
  }
  .header-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    letter-spacing: -0.02em;
  }
  .header-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  .header-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    background: var(--background-tertiary, #f3f4f6);
    border: 1px solid var(--border-color, #e5e7eb);
    border-radius: 0.5rem;
    color: var(--text-primary);
    font-weight: 500;
    font-size: 0.875rem;
    transition: all 0.2s ease;
    cursor: pointer;
    position: relative;
    outline: none;
  }

  .header-button:hover {
    background: var(--background-hover, #e5e7eb);
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .header-button:focus-visible {
    box-shadow:
      0 0 0 2px var(--background-primary),
      0 0 0 4px var(--primary-500, #3b82f6);
  }

  .header-button:active {
    transform: translateY(0);
  }

  @media (max-width: 640px) {
    .header-button {
      padding: 0.5rem;
    }
    .button-text {
      display: none;
    }
  }

  .icon {
    width: 1.25rem;
    height: 1.25rem;
    transition: transform 0.2s ease;
  }

  .header-button:hover .icon {
    transform: rotate(180deg);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const refreshButton = document.getElementById("refreshButton");
    if (refreshButton) {
      let isRefreshing = false;

      const handleRefresh = async () => {
        if (isRefreshing) return;

        try {
          isRefreshing = true;
          refreshButton.setAttribute("aria-busy", "true");
          refreshButton.classList.add("refreshing");

          // Dar feedback visual antes de recargar
          await new Promise((resolve) => setTimeout(resolve, 150));
          window.location.reload();
        } catch (error) {
          console.error("Error al recargar:", error);
          refreshButton.classList.add("error");
        } finally {
          isRefreshing = false;
          refreshButton.setAttribute("aria-busy", "false");
        }
      };

      // Soporte para teclado y touch
      refreshButton.addEventListener("click", handleRefresh);
      refreshButton.addEventListener("keydown", (e) => {
        if (e.key === "Enter" || e.key === " ") {
          e.preventDefault();
          handleRefresh();
        }
      });
      refreshButton.addEventListener("touchstart", (e) => {
        e.preventDefault();
        handleRefresh();
      });
    }
  });
</script>
