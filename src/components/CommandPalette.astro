---
interface Props {
  placeholder?: string;
}

const { placeholder = "Buscar... (⌘ K)" } = Astro.props;
---

<div 
  id="commandPalette" 
  class="fixed inset-0 z-50 hidden bg-black/50 dark:bg-black/70"
>
  <div class="fixed inset-x-0 top-0 p-4 sm:p-6 md:p-8">
    <div class="mx-auto max-w-2xl">
      <div class="relative bg-white dark:bg-dark-surface rounded-xl shadow-2xl">
        <!-- Barra de búsqueda -->
        <div class="flex items-center px-4 py-3 border-b border-gray-200 dark:border-dark-border">
          <svg 
            class="w-5 h-5 text-gray-400 dark:text-gray-500" 
            fill="none" 
            stroke="currentColor" 
            viewBox="0 0 24 24"
          >
            <path 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              stroke-width="2" 
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
            />
          </svg>
          <input
            type="text"
            id="commandInput"
            class="flex-1 ml-3 bg-transparent border-0 focus:ring-0 focus:outline-none text-gray-900 dark:text-white placeholder-gray-400 dark:placeholder-gray-500"
            placeholder={placeholder}
            autocomplete="off"
          />
          <kbd class="hidden sm:inline-block px-2 py-1 text-xs font-semibold text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-dark-primary rounded">
            ESC
          </kbd>
        </div>

        <!-- Resultados -->
        <div class="max-h-[60vh] overflow-y-auto">
          <div id="searchResults" class="py-2">
            <!-- Los resultados se insertarán aquí dinámicamente -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let isOpen = false;
  const palette = document.getElementById('commandPalette');
  const input = document.getElementById('commandInput');
  const results = document.getElementById('searchResults');

  // Atajos de teclado
  document.addEventListener('keydown', (e) => {
    // Abrir con Command/Ctrl + K
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault();
      togglePalette();
    }
    
    // Cerrar con ESC
    if (e.key === 'Escape' && isOpen) {
      closePalette();
    }
  });

  // Cerrar al hacer clic fuera
  palette?.addEventListener('click', (e) => {
    if (e.target === palette) {
      closePalette();
    }
  });

  function togglePalette() {
    isOpen = !isOpen;
    if (isOpen) {
      palette?.classList.remove('hidden');
      input?.focus();
    } else {
      closePalette();
    }
  }

  function closePalette() {
    isOpen = false;
    palette?.classList.add('hidden');
    if (input) input.value = '';
    if (results) results.innerHTML = '';
  }

  // Búsqueda en tiempo real
  input?.addEventListener('input', async (e) => {
    const query = (e.target as HTMLInputElement).value;
    if (!query.trim()) {
      if (results) results.innerHTML = '';
      return;
    }

    try {
      const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
      const data = await response.json();
      
      if (results) {
        results.innerHTML = data.items.map((item: any) => `
          <a 
            href="${item.url}" 
            class="block px-4 py-2 hover:bg-gray-100 dark:hover:bg-dark-primary transition-colors duration-100"
          >
            <div class="text-sm text-gray-900 dark:text-white">
              ${item.title}
            </div>
            <div class="text-xs text-gray-500 dark:text-gray-400">
              ${item.description}
            </div>
          </a>
        `).join('');
      }
    } catch (error) {
      console.error('Error en la búsqueda:', error);
    }
  });
</script>

<style>
  /* Animaciones */
  #commandPalette {
    transition: opacity 0.2s ease-in-out;
  }

  #commandPalette:not(.hidden) {
    animation: fadeIn 0.2s ease-in-out;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  /* Scrollbar personalizado */
  .max-h-[60vh] {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
  }

  .max-h-[60vh]::-webkit-scrollbar {
    width: 6px;
  }

  .max-h-[60vh]::-webkit-scrollbar-track {
    background: transparent;
  }

  .max-h-[60vh]::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }
</style> 