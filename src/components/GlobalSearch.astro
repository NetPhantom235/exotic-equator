---
// Componente de búsqueda global para la aplicación
---

<div class="global-search-container">
  <div id="globalSearchTrigger" class="global-search-trigger">
    <div class="search-icon"></div>
    <span class="search-placeholder">Buscar en la aplicación... <span class="keyboard-shortcut">Ctrl+K</span></span>
  </div>
  
  <div id="globalSearchModal" class="global-search-modal">
    <div class="global-search-overlay"></div>
    
    <div class="global-search-content">
      <div class="global-search-header">
        <div class="search-icon"></div>
        <input 
          type="text" 
          id="globalSearchInput" 
          class="global-search-input" 
          placeholder="Buscar dispositivos, préstamos, supervisores..."
          autocomplete="off"
        />
        <button id="closeGlobalSearch" class="global-search-close">
          <span class="sr-only">Cerrar</span>
          <div class="close-icon"></div>
        </button>
      </div>
      
      <div class="global-search-results" id="globalSearchResults">
        <div class="search-results-empty">
          <p>Comienza a escribir para buscar</p>
          <div class="search-instructions">
            <div class="search-instruction">
              <span class="kbd-key">↑</span>
              <span class="kbd-key">↓</span>
              <span class="search-instruction-text">para navegar</span>
            </div>
            <div class="search-instruction">
              <span class="kbd-key">Enter</span>
              <span class="search-instruction-text">para seleccionar</span>
            </div>
            <div class="search-instruction">
              <span class="kbd-key">Esc</span>
              <span class="search-instruction-text">para cerrar</span>
            </div>
          </div>
        </div>
        
        <div id="searchResultsCategories" class="search-results-categories" style="display: none;">
          <!-- Aquí se mostrarán categorías de resultados -->
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .global-search-container {
    position: relative;
  }
  
  .global-search-trigger {
    border: 1px solid var(--border-color);
    background: var(--background-tertiary);
    border-radius: var(--radius-lg);
    padding: 0.5rem 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all var(--transition-fast);
    width: 100%;
    max-width: 24rem;
  }
  
  .global-search-trigger:hover {
    background: var(--background-secondary);
    border-color: var(--border-color-focus);
  }
  
  .search-icon {
    width: 1rem;
    height: 1rem;
    background-color: currentColor;
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z'%3E%3C/path%3E%3C/svg%3E");
    mask-size: contain;
    mask-repeat: no-repeat;
    mask-position: center;
    flex-shrink: 0;
  }
  
  .close-icon {
    width: 1rem;
    height: 1rem;
    background-color: currentColor;
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M6 18L18 6M6 6l12 12'%3E%3C/path%3E%3C/svg%3E");
    mask-size: contain;
    mask-repeat: no-repeat;
    mask-position: center;
  }
  
  .search-placeholder {
    flex: 1;
    font-size: var(--text-sm);
  }
  
  .keyboard-shortcut {
    background: var(--background-secondary);
    color: var(--text-tertiary);
    border-radius: var(--radius-sm);
    font-size: 0.7rem;
    padding: 0.1rem 0.3rem;
    margin-left: 0.5rem;
    border: 1px solid var(--border-color);
    float: right;
  }
  
  .global-search-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1000;
    display: none;
  }
  
  .global-search-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
  }
  
  .global-search-content {
    position: relative;
    width: 90%;
    max-width: 600px;
    background: var(--background-secondary);
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    margin: 5vh auto 0;
    overflow: hidden;
    max-height: 80vh;
    display: flex;
    flex-direction: column;
  }
  
  .global-search-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    background: var(--background-tertiary);
  }
  
  .global-search-input {
    flex: 1;
    background: transparent;
    border: none;
    color: var(--text-primary);
    font-size: var(--text-base);
    outline: none;
    padding: 0.5rem 0;
  }
  
  .global-search-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: var(--radius-full, 9999px);
  }
  
  .global-search-close:hover {
    color: var(--text-primary);
    background: var(--background-tertiary);
  }
  
  .global-search-results {
    padding: 1rem;
    overflow-y: auto;
    flex: 1;
  }
  
  .search-results-empty {
    text-align: center;
    color: var(--text-tertiary);
    padding: 2rem 0;
  }
  
  .search-instructions {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1rem;
    margin-top: 1.5rem;
  }
  
  .search-instruction {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .search-instruction-text {
    color: var(--text-secondary);
    font-size: var(--text-sm);
  }
  
  .search-results-categories {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .search-category {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .search-category-title {
    font-size: var(--text-sm);
    color: var(--text-tertiary);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    padding-bottom: 0.25rem;
    border-bottom: 1px solid var(--border-color);
  }
  
  .search-result-item {
    padding: 0.5rem 0.75rem;
    border-radius: var(--radius-md);
    cursor: pointer;
    transition: background var(--transition-fast);
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }
  
  .search-result-item:hover,
  .search-result-item.selected {
    background: var(--background-tertiary);
  }
  
  .search-result-icon {
    width: 1.25rem;
    height: 1.25rem;
    background-color: var(--text-tertiary);
    mask-size: contain;
    mask-repeat: no-repeat;
    mask-position: center;
    flex-shrink: 0;
  }
  
  .search-result-device {
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z'%3E%3C/path%3E%3C/svg%3E");
  }
  
  .search-result-loan {
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4'%3E%3C/path%3E%3C/svg%3E");
  }
  
  .search-result-supervisor {
    mask-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 24 24' stroke='currentColor'%3E%3Cpath stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z'%3E%3C/path%3E%3C/svg%3E");
  }
  
  .search-result-content {
    flex: 1;
    display: flex;
    flex-direction: column;
  }
  
  .search-result-title {
    font-size: var(--text-base);
    color: var(--text-primary);
  }
  
  .search-result-subtitle {
    font-size: var(--text-sm);
    color: var(--text-secondary);
  }
  
  .search-highlight {
    color: var(--accent);
    font-weight: 600;
  }
  
  .search-no-results {
    text-align: center;
    color: var(--text-tertiary);
    padding: 2rem;
    font-style: italic;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Referencias al DOM
    const searchTrigger = document.getElementById('globalSearchTrigger');
    const searchModal = document.getElementById('globalSearchModal');
    const searchOverlay = document.querySelector('.global-search-overlay');
    const searchInput = document.getElementById('globalSearchInput') as HTMLInputElement;
    const closeButton = document.getElementById('closeGlobalSearch');
    const searchResults = document.getElementById('globalSearchResults');
    const categoriesContainer = document.getElementById('searchResultsCategories');
    
    // Método para abrir modal
    function openSearchModal() {
      if (!searchModal) return;
      searchModal.style.display = 'block';
      // Enfocar input después de un pequeño delay para animaciones
      setTimeout(() => searchInput?.focus(), 50);
    }
    
    // Método para cerrar modal
    function closeSearchModal() {
      if (!searchModal) return;
      searchModal.style.display = 'none';
      // Limpiar input y resultados
      if (searchInput) searchInput.value = '';
      if (categoriesContainer) categoriesContainer.style.display = 'none';
    }
    
    // Event listeners
    if (searchTrigger) {
      searchTrigger.addEventListener('click', openSearchModal);
    }
    
    if (closeButton) {
      closeButton.addEventListener('click', closeSearchModal);
    }
    
    if (searchOverlay) {
      searchOverlay.addEventListener('click', closeSearchModal);
    }
    
    // Atajos de teclado para abrir búsqueda
    document.addEventListener('keydown', function(e) {
      if (e.ctrlKey && e.key.toLowerCase() === 'k') {
        e.preventDefault();
        openSearchModal();
      }
      
      if (e.key === 'Escape' && searchModal && searchModal.style.display === 'block') {
        closeSearchModal();
      }
    });
    
    // Lógica de búsqueda
    if (searchInput) {
      searchInput.addEventListener('input', debounce(handleSearch, 250));
    }
    
    // Función para manejar la búsqueda
    async function handleSearch() {
      if (!searchInput || !categoriesContainer) return;
      
      const query = searchInput.value.trim();
      
      if (query.length < 2) {
        categoriesContainer.style.display = 'none';
        return;
      }
      
      // Simular búsqueda (esto se conectaría a tu backend real)
      try {
        // Mostrar estado de carga
        if (categoriesContainer) {
          categoriesContainer.innerHTML = '<div class="search-loading">Buscando...</div>';
          categoriesContainer.style.display = 'block';
        }
        
        // Simular delay de red
        await new Promise(resolve => setTimeout(resolve, 300));
        
        // Ejecutar búsqueda según la estructura de tu aplicación
        const devices = await searchDevices(query);
        const loans = await searchLoans(query);
        const supervisors = await searchSupervisors(query);
        
        renderSearchResults(query, { devices, loans, supervisors });
      } catch (error) {
        console.error('Error en búsqueda:', error);
        if (categoriesContainer) {
          categoriesContainer.innerHTML = '<div class="search-error">Error al buscar. Intenta de nuevo.</div>';
        }
      }
    }
    
    interface Device {
      id: number;
      name: string;
      serial: string;
    }
    
    interface Loan {
      id: number;
      deviceName: string;
      supervisorName: string;
    }
    
    interface Supervisor {
      id: number;
      name: string;
      email: string;
    }
    
    interface SearchResults {
      devices: Device[];
      loans: Loan[];
      supervisors: Supervisor[];
    }
    
    // Renderizar resultados
    function renderSearchResults(query: string, results: SearchResults) {
      if (!categoriesContainer) return;
      
      const { devices, loans, supervisors } = results;
      const hasResults = devices.length > 0 || loans.length > 0 || supervisors.length > 0;
      
      if (!hasResults) {
        categoriesContainer.innerHTML = `
          <div class="search-no-results">
            No se encontraron resultados para "${query}"
          </div>
        `;
        categoriesContainer.style.display = 'block';
        return;
      }
      
      let html = '';
      
      // Dispositivos
      if (devices.length > 0) {
        html += `
          <div class="search-category">
            <div class="search-category-title">Dispositivos (${devices.length})</div>
            <div class="search-category-items">
              ${devices.map((device: Device) => `
                <div class="search-result-item" data-url="/devices?id=${device.id}">
                  <div class="search-result-icon search-result-device"></div>
                  <div class="search-result-content">
                    <div class="search-result-title">${highlightMatch(device.name, query)}</div>
                    <div class="search-result-subtitle">${device.serial || 'Sin número de serie'}</div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }
      
      // Préstamos
      if (loans.length > 0) {
        html += `
          <div class="search-category">
            <div class="search-category-title">Préstamos (${loans.length})</div>
            <div class="search-category-items">
              ${loans.map((loan: Loan) => `
                <div class="search-result-item" data-url="/loans?id=${loan.id}">
                  <div class="search-result-icon search-result-loan"></div>
                  <div class="search-result-content">
                    <div class="search-result-title">Préstamo #${loan.id}</div>
                    <div class="search-result-subtitle">${loan.deviceName || 'Dispositivo'} - ${loan.supervisorName || 'Supervisor'}</div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }
      
      // Supervisores
      if (supervisors.length > 0) {
        html += `
          <div class="search-category">
            <div class="search-category-title">Supervisores (${supervisors.length})</div>
            <div class="search-category-items">
              ${supervisors.map((supervisor: Supervisor) => `
                <div class="search-result-item" data-url="/supervisors?id=${supervisor.id}">
                  <div class="search-result-icon search-result-supervisor"></div>
                  <div class="search-result-content">
                    <div class="search-result-title">${highlightMatch(supervisor.name, query)}</div>
                    <div class="search-result-subtitle">${supervisor.email || 'Sin correo'}</div>
                  </div>
                </div>
              `).join('')}
            </div>
          </div>
        `;
      }
      
      categoriesContainer.innerHTML = html;
      categoriesContainer.style.display = 'block';
      
      // Agregar interactividad
      document.querySelectorAll('.search-result-item').forEach(function(item) {
        item.addEventListener('click', function(this: HTMLElement) {
          const url = this.dataset.url;
          if (url) {
            window.location.href = url;
          }
        });
      });
    }
    
    // Función para resaltar coincidencias
    function highlightMatch(text: string, query: string): string {
      if (!text) return '';
      
      const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
      return text.replace(regex, '<span class="search-highlight">$1</span>');
    }
    
    // Escape para expresiones regulares
    function escapeRegExp(string: string): string {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }
    
    // Debounce para evitar muchas búsquedas consecutivas
    function debounce(func: Function, delay: number) {
      let timeout: ReturnType<typeof setTimeout>;
      return function(this: any, ...args: any[]) {
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(this, args), delay);
      };
    }
    
    // Estas funciones simularían tu API real
    async function searchDevices(query: string): Promise<Device[]> {
      // Aquí conectarías con tu API real
      // Por ahora, devolvemos datos de prueba que coincidan con la búsqueda
      return [
        { id: 1, name: 'Laptop HP EliteBook', serial: 'SN12345678' },
        { id: 2, name: 'iPad Pro 12.9', serial: 'IPAD98765' },
        { id: 3, name: 'Monitor Dell 27"', serial: 'MN55667788' }
      ].filter(device => 
        device.name.toLowerCase().includes(query.toLowerCase()) || 
        device.serial.toLowerCase().includes(query.toLowerCase())
      );
    }
    
    async function searchLoans(query: string): Promise<Loan[]> {
      return [
        { id: 101, deviceName: 'Laptop HP EliteBook', supervisorName: 'Juan Pérez' },
        { id: 102, deviceName: 'iPad Pro 12.9', supervisorName: 'María García' },
        { id: 103, deviceName: 'Monitor Dell 27"', supervisorName: 'Carlos Rodríguez' }
      ].filter(loan => 
        loan.id.toString().includes(query) ||
        loan.deviceName.toLowerCase().includes(query.toLowerCase()) ||
        loan.supervisorName.toLowerCase().includes(query.toLowerCase())
      );
    }
    
    async function searchSupervisors(query: string): Promise<Supervisor[]> {
      return [
        { id: 201, name: 'Juan Pérez', email: 'juan.perez@ejemplo.com' },
        { id: 202, name: 'María García', email: 'maria.garcia@ejemplo.com' },
        { id: 203, name: 'Carlos Rodríguez', email: 'carlos.rodriguez@ejemplo.com' }
      ].filter(supervisor => 
        supervisor.name.toLowerCase().includes(query.toLowerCase()) ||
        (supervisor.email && supervisor.email.toLowerCase().includes(query.toLowerCase()))
      );
    }
  });
</script> 