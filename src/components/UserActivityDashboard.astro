---
import { authService } from '../lib/auth/authService';

interface Props {
  userId: string;
  limit?: number;
}

const { userId, limit = 20 } = Astro.props;

// Get user activity logs
const activityLogs = await authService.getUserActivityLog(userId, limit);

// Get active security alerts for this user
const alerts = await prisma.alert.findMany({
  where: {
    status: 'active',
    message: {
      contains: userId
    }
  },
  orderBy: {
    createdAt: 'desc'
  },
  take: 5
});

// Group activities by date for better visualization
const groupedActivities = activityLogs.reduce((acc, log) => {
  const date = new Date(log.createdAt).toLocaleDateString();
  if (!acc[date]) acc[date] = [];
  acc[date].push(log);
  return acc;
}, {});
---

<div class="bg-white dark:bg-gray-800 shadow rounded-lg p-4 mb-6">
  <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Actividad Reciente</h2>
  
  {alerts.length > 0 && (
    <div class="mb-6">
      <h3 class="text-lg font-medium text-red-600 dark:text-red-400 mb-2">Alertas de Seguridad</h3>
      <div class="space-y-2">
        {alerts.map(alert => (
          <div class="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 p-3 rounded">
            <p class="text-sm text-red-700 dark:text-red-300">{alert.message}</p>
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
              {new Date(alert.createdAt).toLocaleString()}
            </p>
          </div>
        ))}
      </div>
    </div>
  )}

  <div class="space-y-6">
    {Object.entries(groupedActivities).map(([date, logs]) => (
      <div>
        <h3 class="text-md font-medium text-gray-700 dark:text-gray-300 mb-2 border-b border-gray-200 dark:border-gray-700 pb-1">
          {date}
        </h3>
        <div class="space-y-3">
          {logs.map((log) => {
            // Determine icon and color based on action type
            let icon = 'user';
            let color = 'blue';
            
            if (log.action.includes('login')) {
              icon = 'login';
              color = log.success ? 'green' : 'red';
            } else if (log.action.includes('update')) {
              icon = 'pencil';
              color = 'yellow';
            } else if (log.action.includes('delete')) {
              icon = 'trash';
              color = 'red';
            } else if (log.action.includes('permission')) {
              icon = 'shield';
              color = log.success ? 'green' : 'red';
            }
            
            return (
              <div class="flex items-start">
                <div class={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center bg-${color}-100 dark:bg-${color}-900/30 text-${color}-600 dark:text-${color}-400`}>
                  <span class="sr-only">{log.action}</span>
                  <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    {icon === 'user' && <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>}
                    {icon === 'login' && <path fill-rule="evenodd" d="M3 3a1 1 0 00-1 1v12a1 1 0 001 1h12a1 1 0 001-1V7.414l-5-5H3zm7 5a1 1 0 100 2h5v8H5V5h5v3z" clip-rule="evenodd"></path>}
                    {icon === 'pencil' && <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"></path>}
                    {icon === 'trash' && <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd"></path>}
                    {icon === 'shield' && <path fill-rule="evenodd" d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>}
                  </svg>
                </div>
                <div class="ml-3 w-full">
                  <div class="flex justify-between">
                    <p class="text-sm font-medium text-gray-900 dark:text-gray-100">
                      {log.action.replace(/_/g, ' ')}
                    </p>
                    <span class="text-xs text-gray-500 dark:text-gray-400">
                      {new Date(log.createdAt).toLocaleTimeString()}
                    </span>
                  </div>
                  {log.details && (
                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-0.5">
                      {JSON.parse(log.details).toString()}
                    </p>
                  )}
                </div>
              </div>
            );
          })}
        </div>
      </div>
    ))}
  </div>
  
  {activityLogs.length === 0 && (
    <p class="text-gray-500 dark:text-gray-400 text-center py-4">No hay actividad registrada</p>
  )}
</div>