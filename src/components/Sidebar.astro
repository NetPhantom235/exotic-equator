---
// Sidebar.astro - Navigation component for the machine management system
import { authService } from "../lib/auth/authService.js";

// Obtener el usuario actual de las locals y la cookie para debug
const user = Astro.locals.user;
const sessionCookie = Astro.cookies.get('session')?.value;

// Log para depuración
console.log('=== SIDEBAR DEBUG ===');
console.log('Session cookie exists:', !!sessionCookie);
console.log('User from locals:', user);

// Si no hay usuario en locals pero hay cookie, intentar validar la sesión
let validatedUser = user;
if (!user && sessionCookie) {
  try {
    console.log('Intentando validar sesión desde cookie...');
    validatedUser = await authService.validateSession(sessionCookie);
    console.log('Usuario validado desde cookie:', validatedUser);
  } catch (error) {
    console.error('Error validando sesión:', error);
  }
}

// Usar el usuario validado para determinar los enlaces
const activeUser = validatedUser || user;

// Definir los enlaces de navegación para usuarios autenticados
const mainNavLinks = [
  {
    title: 'Panel de Control',
    href: '/dashboard',
    icon: 'chart-bar',
  },
  {
    title: 'Dispositivos',
    href: '/devices',
    icon: 'device-tablet',
  },
  {
    title: 'Supervisores',
    href: '/supervisors',
    icon: 'user-group',
  },
  {
    title: 'Préstamos',
    href: '/loans',
    icon: 'clipboard-document-list',
  },
  {
    title: 'Alertas',
    href: '/alerts',
    icon: 'bell-alert',
  },
  {
    title: 'Generar QR',
    href: '/qr',
    icon: 'qr-code',
  }
];

// Enlaces de administración solo para administradores
const adminLinks = activeUser?.role === 'ADMIN' ? [
  {
    title: 'Administración',
    href: '/admin',
    icon: 'cog-6-tooth',
  },
  {
    title: 'Usuarios',
    href: '/admin/users',
    icon: 'user',
  },
  {
    title: 'Reportes',
    href: '/admin/reports',
    icon: 'chart-bar-square',
  },
  {
    title: 'Logs del Sistema',
    href: '/admin/logs',
    icon: 'document-text',
  }
] : [];

// Enlaces para usuarios no autenticados
const publicLinks = [
  {
    title: 'Inicio',
    href: '/',
    icon: 'home',
  },
  {
    title: 'Iniciar Sesión',
    href: '/login',
    icon: 'arrow-right-on-rectangle',
  },
  {
    title: 'Registro',
    href: '/register',
    icon: 'user-plus',
  }
];

// Determinar qué enlaces mostrar según si el usuario está autenticado
const navLinks = activeUser ? mainNavLinks : publicLinks;

// Determinar la página actual para resaltar el enlace activo
const currentPath = Astro.url.pathname;
---

<aside class="sidebar-nav">
  <div class="sidebar-header">
    <a href="/" class="logo">
      <span class="logo-text">InventoryPro</span>
    </a>
    <button id="mobile-toggle" class="mobile-toggle" aria-label="Toggle menu">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
      </svg>
    </button>
  </div>
  
  <nav class="sidebar-links">
    <ul class="nav-section">
      {navLinks.map((link) => (
        <li class:list={['nav-item', { active: currentPath === link.href || currentPath.startsWith(link.href + '/') }]}>
          <a href={link.href} class="nav-link">
            <svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
              <use href={`/icons/heroicons.svg#${link.icon}`}></use>
            </svg>
            <span>{link.title}</span>
          </a>
        </li>
      ))}
    </ul>
    
    {adminLinks.length > 0 && (
      <>
        <div class="nav-divider"></div>
        <h3 class="nav-section-title">Administración</h3>
        <ul class="nav-section">
          {adminLinks.map((link) => (
            <li class:list={['nav-item', { active: currentPath === link.href || currentPath.startsWith(link.href + '/') }]}>
              <a href={link.href} class="nav-link">
                <svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                  <use href={`/icons/heroicons.svg#${link.icon}`}></use>
                </svg>
                <span>{link.title}</span>
              </a>
            </li>
          ))}
        </ul>
      </>
    )}
    
    {activeUser && (
      <>
        <div class="nav-divider"></div>
        <div class="user-section">
          <div class="user-info">
            <div class="user-avatar">
              {activeUser.email.charAt(0).toUpperCase()}
            </div>
            <div class="user-details">
              <span class="user-name">{activeUser.email}</span>
              <span class="user-role">{activeUser.role}</span>
            </div>
          </div>
          <a href="/logout" class="logout-button">
            <svg class="icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
              <use href="/icons/heroicons.svg#arrow-left-on-rectangle"></use>
            </svg>
            <span>Cerrar sesión</span>
          </a>
        </div>
      </>
    )}
  </nav>
</aside>

<style>
  .sidebar-nav {
    display: flex;
    flex-direction: column;
    width: 260px;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    background: var(--background-secondary);
    border-right: 1px solid var(--border-color);
    box-shadow: var(--shadow);
    overflow-y: auto;
    z-index: 100;
    padding: 1rem 0;
  }
  
  .sidebar-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0 1.5rem;
    margin-bottom: 2rem;
  }
  
  .logo {
    display: flex;
    align-items: center;
    text-decoration: none;
  }
  
  .logo-text {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-left: 0.5rem;
  }
  
  .mobile-toggle {
    display: none;
    background: transparent;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.5rem;
  }
  
  .mobile-toggle svg {
    width: 1.5rem;
    height: 1.5rem;
  }
  
  .sidebar-links {
    display: flex;
    flex-direction: column;
    flex: 1;
  }
  
  .nav-section {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .nav-section-title {
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--text-secondary);
    padding: 0 1.5rem;
    margin: 1rem 0 0.5rem;
  }
  
  .nav-item {
    margin: 0.3rem 0;
  }
  
  .nav-link {
    display: flex;
    align-items: center;
    padding: 0.75rem 1.5rem;
    color: var(--text-secondary);
    text-decoration: none;
    border-left: 3px solid transparent;
    transition: all 0.2s ease;
  }
  
  .nav-link:hover {
    background-color: rgba(255, 255, 255, 0.05);
    color: var(--text-primary);
  }
  
  .nav-item.active .nav-link {
    background-color: rgba(49, 130, 206, 0.1);
    color: var(--text-primary);
    border-left-color: #3182ce;
  }
  
  .icon {
    width: 1.25rem;
    height: 1.25rem;
    margin-right: 0.75rem;
    flex-shrink: 0;
  }
  
  .nav-divider {
    height: 1px;
    background-color: var(--border-color);
    margin: 1rem 1.5rem;
  }
  
  .user-section {
    margin-top: auto;
    padding: 1rem 1.5rem;
    border-top: 1px solid var(--border-color);
  }
  
  .user-info {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
  }
  
  .user-avatar {
    width: 2.5rem;
    height: 2.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #3182ce;
    color: white;
    border-radius: 50%;
    font-weight: 600;
    margin-right: 0.75rem;
  }
  
  .user-details {
    flex: 1;
    min-width: 0;
  }
  
  .user-name {
    display: block;
    font-weight: 500;
    color: var(--text-primary);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .user-role {
    display: block;
    font-size: 0.75rem;
    color: var(--text-secondary);
  }
  
  .logout-button {
    display: flex;
    align-items: center;
    width: 100%;
    padding: 0.75rem;
    margin-top: 0.5rem;
    background-color: rgba(239, 68, 68, 0.1);
    color: #ef4444;
    border: 1px solid rgba(239, 68, 68, 0.2);
    border-radius: 0.375rem;
    text-decoration: none;
    transition: all 0.2s ease;
    justify-content: center;
  }
  
  .logout-button:hover {
    background-color: #ef4444;
    color: white;
    text-decoration: none;
  }
  
  .logout-button .icon {
    margin-right: 0.5rem;
  }
  
  @media (max-width: 768px) {
    .sidebar-nav {
      transform: translateX(-100%);
      transition: transform 0.3s ease;
    }
    
    .mobile-toggle {
      display: block;
    }
    
    .sidebar-nav.show {
      transform: translateX(0);
    }
  }
</style>

<script>
  // Manejar la apertura/cierre del menú en móviles
  document.addEventListener('DOMContentLoaded', () => {
    const mobileToggle = document.getElementById('mobile-toggle');
    const sidebar = document.querySelector('.sidebar-nav');
    
    if (mobileToggle && sidebar) {
      mobileToggle.addEventListener('click', () => {
        sidebar.classList.toggle('show');
      });
      
      // Cerrar el menú cuando se hace clic en un enlace
      const navLinks = document.querySelectorAll('.nav-link');
      navLinks.forEach(link => {
        link.addEventListener('click', () => {
          if (window.innerWidth <= 768) {
            sidebar.classList.remove('show');
          }
        });
      });
    }
  });
</script>