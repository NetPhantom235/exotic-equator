---
import Layout from "../layouts/Layout.astro";
import DashboardHeader from "../components/DashboardHeader.astro";
import { deviceService } from "../lib/deviceService.js";

// Recuperar todos los dispositivos
const { devices } = await deviceService.getAllDevices();

// Acceso robusto a user
declare const Astro: { locals: Locals };
const user = Astro.locals.user;
---

<Layout title="Generador de Códigos QR | Sistema de Gestión de Inventario">
  <DashboardHeader title="Generador de Códigos QR" />
  
  <div class="qr-container">
    <div class="qr-generator-panel">
      <h2 class="panel-title">Generar Código QR</h2>
      <p class="panel-desc">
        Selecciona un dispositivo para generar su código QR o introduce un ID manualmente.
      </p>
      
      <div class="form-group">
        <label for="searchInput" class="form-label">Buscar dispositivo</label>
        <input
          type="text"
          id="qrSearchInput"
          class="form-control"
          placeholder="Buscar por nombre o ID..."
        />
        <div id="qrSearchResults" class="search-results"></div>
      </div>
      
      <div class="form-group">
        <label for="deviceSelect" class="form-label">Dispositivo</label>
        <select id="deviceSelect" class="form-control">
          <option value="">Selecciona un dispositivo</option>
          {
            devices.map((device) => (
              <option value={device.id}>
                {device.name} - {device.category}
              </option>
            ))
          }
        </select>
      </div>
      
      <div class="form-group">
        <label for="manualIdInput" class="form-label">O introduce ID manualmente</label>
        <input
          type="text"
          id="manualIdInput"
          class="form-control"
          placeholder="ID del dispositivo o código personalizado"
        />
      </div>
      
      <div class="form-actions">
        <button id="generateQrButton" class="btn btn-primary">
          Generar Código QR
        </button>
      </div>
    </div>
    
    <div class="qr-display-panel">
      <h2 class="panel-title">Código QR</h2>
      <div class="qr-preview-container" id="qrPreview">
        <p class="empty-message">El código QR generado aparecerá aquí</p>
      </div>
      
      <div id="qrDetails" class="qr-details" style="display: none;">
        <h3 id="deviceName" class="device-name"></h3>
        <p id="deviceCategory" class="device-category"></p>
        <p id="deviceLocation" class="device-location"></p>
      </div>
      
      <div class="qr-actions" style="display: none;" id="qrActions">
        <button id="printQrButton" class="btn btn-secondary">
          <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M17 17h2a2 2 0 0 0 2 -2v-4a2 2 0 0 0 -2 -2h-14a2 2 0 0 0 -2 2v4a2 2 0 0 0 2 2h2"></path>
            <path d="M17 9v-4a2 2 0 0 0 -2 -2h-6a2 2 0 0 0 -2 2v4"></path>
            <path d="M7 13m0 2a2 2 0 0 1 2 -2h6a2 2 0 0 1 2 2v4a2 2 0 0 1 -2 2h-6a2 2 0 0 1 -2 -2z"></path>
          </svg>
          Imprimir
        </button>
        <button id="downloadQrButton" class="btn btn-secondary">
          <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
            <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
            <path d="M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2"></path>
            <path d="M7 11l5 5l5 -5"></path>
            <path d="M12 4l0 12"></path>
          </svg>
          Descargar
        </button>
      </div>
    </div>
  </div>
</Layout>

<style>
  :root {
    --background-primary: #181a1b;
    --background-secondary: #232526;
    --background-tertiary: #23272e;
    --text-primary: #f3f4f6;
    --text-secondary: #b0b3b8;
    --border-color: #2d2f31;
    --card-radius: 18px;
    --shadow: 0 2px 16px 0 rgba(0, 0, 0, 0.25);
    --font-main: "Inter", "SF Pro Display", "Segoe UI", Arial, sans-serif;
  }
  body,
  html {
    min-height: 100vh;
    font-family: var(--font-main);
    background: var(--background-primary);
    color: var(--text-primary);
    letter-spacing: 0.01em;
  }
  .qr-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 2rem;
    width: 100%;
    max-width: 1400px;
    margin: 2rem auto;
  }
  .qr-generator-panel,
  .qr-display-panel {
    background: var(--background-secondary);
    border-radius: var(--card-radius);
    padding: 2rem;
    box-shadow: var(--shadow);
  }
  .panel-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1rem;
    color: var(--text-primary);
  }
  .panel-desc {
    color: var(--text-secondary);
    margin-bottom: 2rem;
    line-height: 1.5;
  }
  .form-group {
    margin-bottom: 1.5rem;
    position: relative;
  }
  .form-label {
    display: block;
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
  }
  .form-control {
    width: 100%;
    padding: 0.75rem 1rem;
    border-radius: 0.375rem;
    background: var(--background-tertiary);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    font-size: 1rem;
    transition: border-color 0.2s ease;
  }
  .form-control:focus {
    outline: none;
    border-color: #3182ce;
    box-shadow: 0 0 0 1px rgba(49, 130, 206, 0.5);
  }
  .search-results {
    position: absolute;
    width: 100%;
    max-height: 200px;
    overflow-y: auto;
    background: var(--background-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    margin-top: 0.25rem;
    z-index: 10;
    display: none;
  }
  .search-results.active {
    display: block;
  }
  .qr-search-item {
    padding: 0.75rem 1rem;
    cursor: pointer;
    color: var(--text-primary);
  }
  .qr-search-item:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }
  .form-actions {
    margin-top: 2rem;
  }
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
  }
  .btn-primary {
    background-color: #3182ce;
    color: white;
  }
  .btn-primary:hover {
    background-color: #2c5282;
  }
  .btn-secondary {
    background-color: transparent;
    border: 1px solid var(--border-color);
    color: var(--text-primary);
  }
  .btn-secondary:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }
  .qr-preview-container {
    background: var(--background-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    min-height: 300px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1.5rem;
    padding: 1rem;
  }
  .empty-message {
    color: var(--text-secondary);
    text-align: center;
    font-style: italic;
  }
  .qr-details {
    margin-bottom: 1.5rem;
    padding: 1rem;
    background-color: rgba(49, 130, 206, 0.05);
    border-radius: 0.375rem;
    border: 1px solid rgba(49, 130, 206, 0.1);
  }
  .device-name {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
  }
  .device-category,
  .device-location {
    color: var(--text-secondary);
    margin: 0.25rem 0;
    font-size: 0.875rem;
  }
  .qr-actions {
    display: flex;
    gap: 1rem;
  }
  .icon {
    width: 1.25rem;
    height: 1.25rem;
    margin-right: 0.5rem;
  }
  @media (max-width: 768px) {
    .qr-container {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Importar la biblioteca QRCode
  import QRCode from 'qrcode';

  document.addEventListener("DOMContentLoaded", () => {
    // Referencias a elementos DOM
    const searchInput = document.getElementById("qrSearchInput");
    const searchResults = document.getElementById("qrSearchResults");
    const deviceSelect = document.getElementById('deviceSelect');
    let selectedDeviceId = '';
    if (deviceSelect && deviceSelect instanceof HTMLSelectElement) {
      selectedDeviceId = deviceSelect.options[deviceSelect.selectedIndex]?.value || '';
    }
    const manualIdInput = document.getElementById('manualIdInput');
    let manualId = '';
    if (manualIdInput && manualIdInput instanceof HTMLInputElement) {
      manualId = manualIdInput.value.trim();
    }
    const generateQrButton = document.getElementById("generateQrButton");
    const qrPreview = document.getElementById('qrPreview');
    // Selección segura de qrActions
    const qrActions = document.getElementById('qrActions');
    const qrDetails = document.getElementById("qrDetails");
    const deviceNameElement = document.getElementById("deviceName");
    const deviceCategoryElement = document.getElementById("deviceCategory");
    const deviceLocationElement = document.getElementById("deviceLocation");
    const printQrButton = document.getElementById("printQrButton");
    const downloadQrButton = document.getElementById("downloadQrButton");

    // Manejar búsqueda de dispositivos
    if (searchInput && searchResults) {
      searchInput.addEventListener("input", async () => {
        const query = searchInput.value.trim();
        
        if (query.length < 2) {
          searchResults.style.display = "none";
          return;
        }
        
        try {
          // Realizar búsqueda de dispositivos
          searchResults.style.display = "block";
          searchResults.innerHTML = "<div class='qr-search-item'>Buscando...</div>";
          
          // En producción, esto debe ser reemplazado por una llamada a la API real
          const devices = Array.from(deviceSelect.options)
            .filter(option => option.value !== "")
            .filter(option => option.text.toLowerCase().includes(query.toLowerCase()));
          
          if (devices.length === 0) {
            searchResults.innerHTML = "<div class='qr-search-item'>No se encontraron dispositivos</div>";
            return;
          }
          
          // Mostrar resultados
          searchResults.innerHTML = "";
          devices.forEach(device => {
            const item = document.createElement("div");
            item.className = "qr-search-item";
            item.textContent = device.text;
            item.addEventListener("click", () => {
              deviceSelect.value = device.value;
              searchInput.value = "";
              searchResults.style.display = "none";
            });
            searchResults.appendChild(item);
          });
        } catch (error) {
          console.error("Error al buscar dispositivos:", error);
          searchResults.innerHTML = "<div class='qr-search-item'>Error al buscar dispositivos</div>";
        }
      });
      
      // Ocultar resultados al hacer clic fuera
      document.addEventListener("click", (e) => {
        if (searchInput && searchResults && e.target && searchInput instanceof Node && searchResults instanceof Node) {
          if (!searchInput.contains(e.target as Node) && !searchResults.contains(e.target as Node)) {
            searchResults.style.display = "none";
          }
        }
      });
    }

    // Función para generar el código QR
    const generateQR = async (content: string) => {
      try {
        // Limpiar el contenedor
        qrPreview.innerHTML = "";
        
        // Crear elemento de imagen para el código QR
        const qrCanvas = document.createElement("canvas");
        qrCanvas.id = "qrcode-canvas";
        
        // Generar el código QR
        await QRCode.toCanvas(qrCanvas, content, {
          width: 250,
          margin: 1,
          color: {
            dark: "#FFFFFF",
            light: "#232526"
          }
        });
        
        // Añadir el código QR al contenedor
        if (qrPreview && qrCanvas) {
          qrPreview.appendChild(qrCanvas);
        }
        
        // Mostrar acciones
        if (qrActions) qrActions.style.display = "flex";
        
        return true;
      } catch (error) {
        console.error("Error al generar el código QR:", error);
        qrPreview.innerHTML = `<p class="empty-message">Error al generar el código QR: ${error.message}</p>`;
        if (qrActions) qrActions.style.display = "none";
        return false;
      }
    };

    // Manejador para generar código QR
    if (generateQrButton) {
      generateQrButton.addEventListener("click", async () => {
        const deviceId = deviceSelect.value;
        
        // Verificar si se ha seleccionado un dispositivo o introducido un ID manual
        if (!deviceId && !manualId) {
          qrPreview.innerHTML = "<p class='empty-message'>Selecciona un dispositivo o introduce un ID manualmente</p>";
          if (qrActions) qrActions.style.display = "none";
          if (qrDetails) qrDetails.style.display = "none";
          return;
        }
        
        // Si se ha seleccionado un dispositivo
        if (deviceId) {
          try {
            // En un sistema real, aquí se haría una llamada a la API
            let selectedDeviceId = '';
            if (deviceSelect && 'options' in deviceSelect && 'selectedIndex' in deviceSelect) {
              const select = deviceSelect as HTMLSelectElement;
              selectedDeviceId = select.options[select.selectedIndex]?.value || '';
            }
            
            // Extraer información del dispositivo del texto de la opción
            const selectedOption = deviceSelect.options[deviceSelect.selectedIndex];
            const deviceText = selectedOption.text;
            const [name, category] = deviceText.split(' - ');
            
            // Generar el código QR con el ID del dispositivo
            const success = await generateQR(deviceId);
            
            // Si se generó correctamente, mostrar detalles
            if (success && qrDetails) {
              qrDetails.style.display = "block";
              if (deviceNameElement) deviceNameElement.textContent = name;
              if (deviceCategoryElement) deviceCategoryElement.textContent = `Categoría: ${category}`;
              if (deviceLocationElement) deviceLocationElement.textContent = "ID: " + deviceId;
            }
          } catch (error) {
            console.error("Error al obtener información del dispositivo:", error);
            qrPreview.innerHTML = "<p class='empty-message'>Error al obtener información del dispositivo</p>";
            if (qrActions) qrActions.style.display = "none";
            if (qrDetails) qrDetails.style.display = "none";
          }
        } 
        // Si se ha introducido un ID manual
        else if (manualId) {
          const success = await generateQR(manualId);
          
          // Mostrar detalles simples para ID manual
          if (success && qrDetails) {
            qrDetails.style.display = "block";
            if (deviceNameElement) deviceNameElement.textContent = "ID Manual";
            if (deviceCategoryElement) deviceCategoryElement.textContent = "Contenido: " + manualId;
            if (deviceLocationElement) deviceLocationElement.textContent = "";
          }
        }
      });
    }

    // Manejar impresión del código QR
    if (printQrButton) {
      printQrButton.addEventListener("click", () => {
        const canvas = document.getElementById("qrcode-canvas");
        if (!canvas) return;
        
        // Crear una ventana de impresión
        const printWindow = window.open('', 'PRINT', 'height=600,width=800');
        
        const deviceName = deviceNameElement?.textContent || "Código QR";
        
        if (printWindow) {
          printWindow.document.write(`
            <html>
              <head>
                <title>${deviceName}</title>
                <style>
                  body {
                    font-family: sans-serif;
                    padding: 20px;
                    text-align: center;
                  }
                  .qr-container {
                    margin: 20px auto;
                    max-width: 300px;
                  }
                  h1 {
                    font-size: 18px;
                    margin-bottom: 10px;
                  }
                  img {
                    max-width: 100%;
                    height: auto;
                  }
                </style>
              </head>
              <body>
                <div class="qr-container">
                  <h1>${deviceName}</h1>
                  <img src="${(canvas as HTMLCanvasElement).toDataURL()}" />
                </div>
              </body>
            </html>
          `);
          
          printWindow.document.close();
          printWindow.focus();
          
          // Retrasar la impresión para asegurar que el contenido se cargue
          setTimeout(() => {
            printWindow.print();
            printWindow.close();
          }, 250);
        }
      });
    }

    // Manejar descarga del código QR
    if (downloadQrButton) {
      downloadQrButton.addEventListener("click", () => {
        const canvas = document.getElementById("qrcode-canvas");
        if (!canvas) return;
        
        // Crear un enlace para la descarga
        const link = document.createElement("a");
        link.href = (canvas as HTMLCanvasElement).toDataURL("image/png");
        link.download = `qr-code-${Date.now()}.png`;
        
        // Añadir al DOM, hacer clic y eliminar
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      });
    }
  });
</script>

<!-- Solución para error de Locals.user (al inicio del archivo o en un archivo d.ts global):
declare global {
  namespace App {
    interface Locals {
      user?: any;
    }
  }
}
O si es Astro.locals, agregar en src/globals.d.ts: -->
declare global {
  interface Locals {
    user?: any;
  }
}
