---
import Layout from "../layouts/Layout.astro";
import { authService, UserRole } from "../lib/auth/authService.js";

let error: string | null = null;
let success: string | null = null;

// Manejo del formulario de registro
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const email = formData.get("email")?.toString();
    const password = formData.get("password")?.toString();
    const confirmPassword = formData.get("confirmPassword")?.toString();

    if (!email || !password || !confirmPassword) {
      error = "Todos los campos son obligatorios";
    } else if (password !== confirmPassword) {
      error = "Las contraseñas no coinciden";
    } else {
      try {
        // Crear usuario con rol USER por defecto
        await authService.createUser({
          email: email,
          passwordHash: password,
          role: UserRole.USER,
        });

        // Redirigir inmediatamente a la página de login
        return Astro.redirect("/login?registered=true");
      } catch (registerError) {
        if (registerError instanceof Error) {
          error = registerError.message;
        } else {
          error = "Error al registrar el usuario";
        }
      }
    }
  } catch (err) {
    console.error("Error en el proceso de registro:", err);
    error = "Error durante el registro";
  }
}
---

<Layout title="Registro | Sistema de Gestión de Inventario">
  <div class="auth-container">
    <div class="auth-card">
      <div class="auth-header">
        <h1>Crear Cuenta</h1>
        <p>Registro en el Sistema de Gestión de Inventario</p>
      </div>

      {error && <div class="error-alert">{error}</div>}
      {success && <div class="success-alert">{success}</div>}

      <form
        method="POST"
        class="auth-form"
        id="registerForm"
        novalidate
        autocomplete="on"
      >
        <div class="form-group">
          <label for="email">Correo electrónico</label>
          <input
            type="email"
            id="email"
            name="email"
            required
            autocomplete="email"
            placeholder="nombre@ejemplo.com"
            aria-required="true"
            aria-describedby="emailError"
            autofocus
          />
          <div class="form-error" id="emailError" aria-live="polite"></div>
        </div>

        <div class="form-group">
          <label for="password">Contraseña</label>
          <input
            type="password"
            id="password"
            name="password"
            required
            placeholder="Contraseña"
            minlength="8"
            aria-required="true"
            aria-describedby="passwordError"
          />
          <div class="form-error" id="passwordError" aria-live="polite"></div>
          <small class="form-helper">Mínimo 8 caracteres</small>
        </div>

        <div class="form-group">
          <label for="confirmPassword">Confirmar Contraseña</label>
          <input
            type="password"
            id="confirmPassword"
            name="confirmPassword"
            required
            placeholder="Confirmar contraseña"
            aria-required="true"
            aria-describedby="confirmPasswordError"
          />
          <div class="form-error" id="confirmPasswordError" aria-live="polite">
          </div>
        </div>

        <div class="form-actions">
          <button
            type="submit"
            class="btn-primary"
            id="registerBtn"
            aria-busy="false">Registrarse</button
          >
        </div>

        <div class="form-footer">
          <p>¿Ya tienes una cuenta? <a href="/login">Iniciar sesión</a></p>
        </div>
      </form>
    </div>
  </div>
</Layout>

<script type="module">
  import {
    FormValidator,
    ValidationRules,
  } from "../components/FormValidator.js";

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById("registerForm");
    const btn = document.getElementById("registerBtn");
    if (!form || !btn) return;

    let submitting = false;
    const validator = new FormValidator(form, {
      showOnBlur: true,
      showOnChange: true,
      realtimeValidation: true,
    })
      .addField(
        "email",
        [
          ValidationRules.required("El email es obligatorio"),
          ValidationRules.email("Introduce un email válido"),
        ],
        document.getElementById("emailError")
      )
      .addField(
        "password",
        [
          ValidationRules.required("La contraseña es obligatoria"),
          ValidationRules.minLength(8, "Mínimo 8 caracteres"),
        ],
        document.getElementById("passwordError")
      )
      .addField(
        "confirmPassword",
        [
          ValidationRules.required("Debes confirmar la contraseña"),
          ValidationRules.custom(function () {
            let passInput = document.getElementById("password");
            let confInput = document.getElementById("confirmPassword");
            let pass = passInput ? passInput.value : "";
            let conf = confInput ? confInput.value : "";
            return pass === conf;
          }, "Las contraseñas no coinciden"),
        ],
        document.getElementById("confirmPasswordError")
      )
      .onSubmit((e) => {
        if (submitting) {
          e.preventDefault();
          return;
        }
        if (!validator.validate()) {
          e.preventDefault();
          return;
        }
        submitting = true;
        btn.disabled = true;
        btn.setAttribute("aria-busy", "true");
        btn.textContent = "Registrando...";
      });

    // Accesibilidad: enfocar el primer campo
    document.getElementById("email")?.focus();
  });
</script>

<style>
  .auth-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
    background: var(--background-primary);
    padding: 2rem;
  }

  .auth-card {
    background: var(--background-secondary);
    border-radius: var(--card-radius);
    box-shadow: var(--shadow);
    width: 100%;
    max-width: 420px;
    padding: 2.5rem;
    margin-bottom: 2rem;
  }

  .auth-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .auth-header h1 {
    font-size: 1.8rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
  }

  .auth-header p {
    color: var(--text-secondary);
    font-size: 1rem;
  }

  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-group label {
    color: var(--text-primary);
    font-size: 0.9rem;
    font-weight: 500;
  }

  .form-group input {
    padding: 0.75rem 1rem;
    border-radius: 8px;
    border: 1px solid var(--border-color);
    background: var(--background-tertiary);
    color: var(--text-primary);
    font-size: 1rem;
    width: 100%;
    transition: border-color 0.2s ease;
  }

  .form-group input:focus {
    border-color: #3182ce;
    outline: none;
    box-shadow: 0 0 0 1px rgba(49, 130, 206, 0.5);
  }

  .form-helper {
    font-size: 0.8rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
  }

  .form-actions {
    display: flex;
    justify-content: center;
    margin-top: 1rem;
  }

  .btn-primary {
    padding: 0.75rem 1.5rem;
    background: #3182ce;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease;
    width: 100%;
  }

  .btn-primary:hover {
    background: #2b6cb0;
  }

  .error-alert {
    padding: 0.75rem;
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid #ef4444;
    border-radius: 8px;
    color: #ef4444;
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .success-alert {
    padding: 0.75rem;
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid #22c55e;
    border-radius: 8px;
    color: #22c55e;
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .form-footer {
    text-align: center;
    margin-top: 1rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .form-footer a {
    color: #3182ce;
    text-decoration: none;
    font-weight: 500;
  }

  .form-footer a:hover {
    text-decoration: underline;
  }

  .form-error {
    color: #ef4444;
    font-size: 0.92rem;
    margin-top: 0.2rem;
    min-height: 1.2em;
    transition: opacity 0.2s;
    opacity: 0;
    display: block;
  }
  .form-error.visible {
    opacity: 1;
    animation: shake 0.2s;
  }
  @keyframes shake {
    0% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-4px);
    }
    50% {
      transform: translateX(4px);
    }
    75% {
      transform: translateX(-2px);
    }
    100% {
      transform: translateX(0);
    }
  }
</style>
