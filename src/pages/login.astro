---
import BaseLayout from "../layouts/BaseLayout.astro";
import Form from "../components/Form.astro";
import Button from "../components/Button.astro";
import Toast from "../components/Toast.astro";
import Card from "../components/Card.astro";
import { authService } from "../lib/auth/authService.js";
import { SessionManager } from "../lib/auth/sessionManager.js";

// Manejo del formulario de login
let error: string | null = null;
let success: string | null = null;

// Verificar si viene de un registro exitoso
const registered = Astro.url.searchParams.get("registered");
if (registered === "true") {
  success = "Usuario registrado correctamente. Ahora puedes iniciar sesión.";
}

if (Astro.request.method === "POST") {
  try {
    const contentType = Astro.request.headers.get("content-type");
    let email: string | undefined;
    let password: string | undefined;

    if (contentType?.includes("application/json")) {
      const body = await Astro.request.json();
      email = body.email;
      password = body.password;
    } else {
      const formData = await Astro.request.formData();
      email = formData.get("email")?.toString();
      password = formData.get("password")?.toString();
    }

    // Validar CSRF token
    const csrfToken = Astro.request.headers.get("x-csrf-token");
    const storedToken = Astro.cookies.get("csrf-token")?.value;

    if (!csrfToken || !storedToken || csrfToken !== storedToken) {
      return new Response(JSON.stringify({ error: "Invalid CSRF token" }), {
        status: 403,
        headers: { "Content-Type": "application/json" },
      });
    }
    if (!email || !password) {
      const isJsonRequest = Astro.request.headers
        .get("content-type")
        ?.includes("application/json");
      if (isJsonRequest) {
        return new Response(
          JSON.stringify({ error: "Email y contraseña son obligatorios" }),
          { status: 400, headers: { "Content-Type": "application/json" } }
        );
      }
      error = "Email y contraseña son obligatorios";
    } else {
      try {
        // Inicializar el session manager
        const sessionManager = new SessionManager();

        const { user, sessionToken } = await authService.login(email, password);

        // Configurar cookie de sesión usando las opciones del SessionManager
        Astro.cookies.set(
          "session",
          sessionToken,
          sessionManager.getCookieOptions(Astro.request)
        );

        success = "Inicio de sesión exitoso";
        return Astro.redirect("/dashboard");
      } catch (loginError) {
        const isJsonRequest = Astro.request.headers
          .get("content-type")
          ?.includes("application/json");
        if (isJsonRequest) {
          return new Response(
            JSON.stringify({ error: "Credenciales incorrectas" }),
            { status: 401, headers: { "Content-Type": "application/json" } }
          );
        }
        error = "Credenciales incorrectas";
      }
    }
  } catch (err) {
    console.error("Error en el proceso de login:", err);
    error = "Error durante el inicio de sesión";
  }
}
---

<BaseLayout title="Iniciar Sesión">
  <div class="login-container">
    <Card variant="elevated" class="login-card">
      <div class="card-header">
        <h1 class="card-title">Iniciar Sesión</h1>
        <p class="card-subtitle">Ingresa tus credenciales para continuar</p>
      </div>

      {error && <div class="error-alert">{error}</div>}
      {success && <div class="success-alert">{success}</div>}
      <Form id="login-form" class="login-form" method="POST">
        <input
          type="hidden"
          name="csrf-token"
          value={Astro.cookies.get("csrf-token")?.value}
        />
        <div class="form-group">
          <label class="form-label" for="email" data-required
            >Correo electrónico</label
          >
          <input
            type="email"
            id="email"
            name="email"
            class="form-input"
            required
            placeholder="tu@email.com"
            autocomplete="email"
          />
          <span class="form-error"></span>
        </div>

        <div class="form-group">
          <label class="form-label" for="password" data-required
            >Contraseña</label
          >
          <input
            type="password"
            id="password"
            name="password"
            class="form-input"
            required
            placeholder="••••••••"
            autocomplete="current-password"
          />
          <span class="form-error"></span>
        </div>

        <Button type="submit" variant="primary" fullWidth>
          Iniciar Sesión
        </Button>
      </Form>
      <div class="form-footer">
        <p>
          ¿No tienes cuenta? <a href="/register" class="register-link"
            >Regístrate aquí</a
          >
        </p>
      </div>
    </Card>
  </div>
</BaseLayout>

<style>
  .login-container {
    min-height: calc(100vh - 60px);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: var(--spacing-lg);
  }

  .login-card {
    width: 100%;
    max-width: 400px;
  }

  .login-form {
    margin-top: var(--spacing-lg);
  }

  .error-alert {
    padding: 0.75rem;
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid #ef4444;
    border-radius: 8px;
    color: #ef4444;
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .success-alert {
    padding: 0.75rem;
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid #22c55e;
    border-radius: 8px;
    color: #22c55e;
    margin-bottom: 1.5rem;
    text-align: center;
  }

  .form-footer {
    margin-top: 1.5rem;
    text-align: center;
  }
  .register-link {
    color: var(--color-primary);
    text-decoration: underline;
    font-weight: 500;
    transition: color 0.2s;
  }
  .register-link:hover {
    color: var(--color-primary-dark, #2563eb);
  }
</style>

<script>
  const form = document.getElementById("login-form") as HTMLFormElement;
  const submitButton = form?.querySelector(
    'button[type="submit"]'
  ) as HTMLButtonElement;
  const csrfToken = form?.querySelector(
    'input[name="csrf-token"]'
  ) as HTMLInputElement;

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();

    if (submitButton) {
      submitButton.disabled = true;
      submitButton.textContent = "Iniciando sesión...";
    }

    try {
      const formData = new FormData(form);
      const response = await fetch(form.action || window.location.pathname, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": csrfToken?.value || "",
        },
        body: JSON.stringify({
          email: formData.get("email"),
          password: formData.get("password"),
        }),
        credentials: "include",
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || "Error al iniciar sesión");
      }

      // Si el login es exitoso, redirigir
      window.location.href = "/dashboard";
    } catch (error) {
      console.error("Error:", error);
      const errorDiv = document.createElement("div");
      errorDiv.className = "error-alert";
      errorDiv.textContent =
        error instanceof Error ? error.message : "Error al iniciar sesión";

      const existingError = form.querySelector(".error-alert");
      if (existingError) {
        existingError.remove();
      }

      form.insertBefore(errorDiv, form.firstChild);
    } finally {
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = "Iniciar Sesión";
      }
    }
  });
</script>
