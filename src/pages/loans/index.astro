---
import Layout from '../../layouts/Layout.astro';
import DashboardHeader from '../../components/DashboardHeader.astro';
import QRScannerLoan from '../../components/QRScannerLoan.astro';
import Toast from '../../components/ui/Toast.astro';
import { prisma } from '../../lib/prisma.js';

// Verificar si hay mensaje de éxito en la URL
const showSuccess = Astro.url.searchParams.get('success') === 'true';

// Obtener préstamos activos
const activeLoans = await prisma.loan.findMany({
  where: {
    status: 'active'
  },
  include: {
    device: true,
    supervisor: true
  },
  orderBy: {
    loanDate: 'desc'
  }
});

// Definir tipos para el objeto window
declare global {
  interface Window {
    onScanSuccess: (device: { 
      id: string;
      loans?: Array<{ id: string }>;
    }) => Promise<void>;
  }
}
---

<Layout title="Préstamos">
  <DashboardHeader title="Gestión de Préstamos" />

  {showSuccess && (
    <Toast 
      message="Préstamo registrado exitosamente" 
      type="success"
      autoClose={5000}
    />
  )}

  <div class="container">
    <div class="grid">
      <!-- Sección del Scanner -->
      <div class="scanner-section">
        <QRScannerLoan 
          title="Escanear Dispositivo"
          subtitle="Escanea el código QR del dispositivo para préstamo o devolución"
        />
      </div>

      <!-- Sección de Préstamos Activos -->
      <div class="active-loans">
        <h2 class="section-title">Préstamos Activos</h2>
        
        <div class="loans-list">
          {activeLoans.map((loan) => (
            <div class="loan-card">
              <div class="loan-info">
                <h3 class="device-name">{loan.device.name}</h3>
                <p class="supervisor">Prestado a: {loan.supervisor.name}</p>
                <p class="date">
                  Fecha: {new Date(loan.loanDate).toLocaleDateString()}
                </p>
              </div>
              <span class="status-badge">Activo</span>
            </div>
          ))}

          {activeLoans.length === 0 && (
            <p class="empty-message">
              No hay préstamos activos
            </p>
          )}
        </div>
      </div>
    </div>
  </div>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
  }

  .section-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: var(--text-primary);
  }

  .loans-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .loan-card {
    background: var(--background-elevated);
    border-radius: 0.5rem;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
  }

  .loan-info {
    flex: 1;
  }

  .device-name {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  .supervisor,
  .date {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin: 0.25rem 0 0 0;
  }

  .status-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    background-color: var(--state-success-color);
    color: white;
  }

  .empty-message {
    text-align: center;
    padding: 2rem;
    color: var(--text-secondary);
    font-size: 0.875rem;
  }

  @media (max-width: 768px) {
    .grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  // Función que se ejecutará cuando se escanee un QR exitosamente
  window.onScanSuccess = async (device: { 
    id: string;
    loans?: Array<{ id: string }>;
  }) => {
    try {
      // Verificar si el dispositivo tiene un préstamo activo
      const hasActiveLoan = device.loans && device.loans.length > 0;
      
      if (hasActiveLoan && device.loans?.[0]?.id) {
        // Si tiene préstamo activo, registrar devolución
        const response = await fetch(`/api/loans/${device.loans[0].id}/return`, {
          method: 'POST'
        });
        
        if (!response.ok) {
          throw new Error('Error al registrar la devolución');
        }
        
      } else {
        // Si no tiene préstamo activo, mostrar formulario de préstamo
        window.location.href = `/loans/new?deviceId=${device.id}`;
      }
      
    } catch (error: unknown) {
      console.error('Error:', error);
      const errorMessage = error instanceof Error ? error.message : 'Error desconocido';
      alert('Error al procesar la operación: ' + errorMessage);
    }
  };

  // Limpiar el parámetro de éxito de la URL después de mostrar la notificación
  if (window.location.search.includes('success=true')) {
    const url = new URL(window.location.href);
    url.searchParams.delete('success');
    window.history.replaceState({}, '', url);
  }
</script> 