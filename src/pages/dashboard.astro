---
import Layout from "../layouts/Layout.astro";
import DashboardHeader from "../components/DashboardHeader.astro";
import MetricsPanel from "../components/MetricsPanel.astro";
import ConnectionStatus from "../components/ConnectionStatus.astro";
import CacheStats from "../components/CacheStats.astro";
import { deviceService } from "../lib/deviceService.js";
import { loanService } from "../lib/loanService.js";
import type { PrismaClient as PrismaClientType } from "@prisma/client";
import { PrismaClient } from "../lib/prisma-adapter.js";
import { authService } from "../lib/auth/authService.js";

// Acceso robusto a user
declare const Astro: { locals: Locals };
let user = Astro.locals.user;

// Si no hay usuario en locals pero hay cookie, intentar validar la sesión
const sessionCookie = Astro.cookies.get("session")?.value;
if (!user && sessionCookie) {
  try {
    console.log("Intentando validar sesión desde cookie en dashboard...");
    user = await authService.validateSession(sessionCookie);
    console.log("Usuario validado desde cookie en dashboard:", user);
  } catch (error) {
    console.error("Error validando sesión en dashboard:", error);
  }
}

// Si sigue sin haber usuario, redirigir al login
if (!user) {
  return Astro.redirect("/login?redirect=/dashboard");
}

// Obtener datos reales
const prisma: PrismaClientType = new PrismaClient();

// Obtener estadísticas de dispositivos
const { devices } = await deviceService.getAllDevices();
const availableDevices = devices.filter((d) => d.status === "available");
const loansInProgress = devices.filter((d) => d.status === "on_loan");

// Obtener préstamos recientes
const recentLoans = await loanService.getAllLoans();
const latestLoans = recentLoans
  .sort(
    (a, b) => new Date(b.loanDate).getTime() - new Date(a.loanDate).getTime()
  )
  .slice(0, 5);

// Obtener alertas activas
const alerts = await prisma.alert.findMany({
  where: { status: "active" },
  orderBy: { createdAt: "desc" },
  take: 5,
});

// Formatear fecha relativa
function getRelativeTime(date: string | number | Date): string {
  const now = new Date();
  const loanDate = new Date(date);
  const diffInHours = Math.floor(
    (now.getTime() - loanDate.getTime()) / (1000 * 60 * 60)
  );

  if (diffInHours < 1) return "Hace unos minutos";
  if (diffInHours < 24)
    return `Hace ${diffInHours} hora${diffInHours > 1 ? "s" : ""}`;

  const diffInDays = Math.floor(diffInHours / 24);
  if (diffInDays === 1) return "Ayer";
  if (diffInDays < 7) return `Hace ${diffInDays} días`;

  const diffInWeeks = Math.floor(diffInDays / 7);
  if (diffInWeeks === 1) return "Hace 1 semana";
  if (diffInWeeks < 4) return `Hace ${diffInWeeks} semanas`;

  const diffInMonths = Math.floor(diffInDays / 30);
  if (diffInMonths === 1) return "Hace 1 mes";
  return `Hace ${diffInMonths} meses`;
}

await prisma.$disconnect();
---

<Layout title="Panel de Control | Sistema de Gestión de Inventario">
  <DashboardHeader title="Panel de Control" />

  {
    user && (
      <div class="welcome-banner">
        <div class="welcome-content">
          <h1>Bienvenido, {user.email.split("@")[0]}</h1>
          <p>Aquí tienes un resumen de la actividad reciente del sistema.</p>
        </div>
      </div>
    )
  }

  <section class="dashboard-grid">
    <div class="dashboard-card">
      <h2 class="card-title">Resumen de Dispositivos</h2>
      <div class="stats-grid">
        <div class="stat-item">
          <span class="stat-value">{devices.length}</span>
          <span class="stat-label">Total Dispositivos</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">{availableDevices.length}</span>
          <span class="stat-label">Disponibles</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">{loansInProgress.length}</span>
          <span class="stat-label">En Préstamo</span>
        </div>
      </div>
      <div class="card-actions">
        <a href="/devices" class="btn-link">Ver todos los dispositivos</a>
      </div>
    </div>

    <div class="dashboard-card">
      <h2 class="card-title">Préstamos Recientes</h2>
      <div class="dashboard-search-bar">
        <input
          id="dashboardLoanSearch"
          class="dashboard-search-input"
          type="text"
          placeholder="Buscar por dispositivo o supervisor..."
        />
      </div>
      <div class="recent-loans" id="dashboardRecentLoans">
        {
          latestLoans.length > 0 ? (
            latestLoans.map((loan) => (
              <div
                class="loan-item"
                data-device={loan.device.name}
                data-supervisor={loan.supervisor.name}
              >
                <div class="loan-info">
                  <span class="loan-device">{loan.device.name}</span>
                  <span class="loan-supervisor">{loan.supervisor.name}</span>
                </div>
                <span class="loan-date">{getRelativeTime(loan.loanDate)}</span>
              </div>
            ))
          ) : (
            <div class="no-data">No hay préstamos recientes</div>
          )
        }
      </div>
      <div
        id="dashboardNoLoansMsg"
        style="display:none; text-align:center; color:var(--text-secondary); padding:1.5rem 0; font-size:1.05rem; font-style:italic;"
      >
        No se encontraron préstamos recientes con los criterios seleccionados.
      </div>
      <div class="card-actions">
        <a href="/loans" class="btn-link">Ver todos los préstamos</a>
      </div>
    </div>

    <div class="dashboard-card">
      <h2 class="card-title">Alertas Activas</h2>
      <div class="alerts-list">
        {
          alerts.length > 0 ? (
            alerts.map((alert) => (
              <div class={`alert-item alert-${alert.type.toLowerCase()}`}>
                <div class="alert-icon" />
                <div class="alert-content">
                  <span class="alert-title">{alert.type}</span>
                  <span class="alert-message">{alert.message}</span>
                </div>
              </div>
            ))
          ) : (
            <div class="no-data">No hay alertas activas</div>
          )
        }
      </div>
      <div class="card-actions">
        <a href="/alerts" class="btn-link">Ver todas las alertas</a>
      </div>
    </div>
  </section>

  <MetricsPanel />
  <ConnectionStatus />
  <CacheStats />
</Layout>

<style>
  :root {
    --background-primary: #181a1b;
    --background-secondary: #232526;
    --background-tertiary: #23272e;
    --text-primary: #f3f4f6;
    --text-secondary: #b0b3b8;
    --border-color: #2d2f31;
    --card-radius: 18px;
    --shadow: 0 2px 16px 0 rgba(0, 0, 0, 0.25);
    --font-main: "Inter", "SF Pro Display", "Segoe UI", Arial, sans-serif;
    --warning: #fbbf24;
    --danger: #ef4444;
    --info: #3b82f6;
    --success: #10b981;
  }

  .welcome-banner {
    background: linear-gradient(to right, #3b82f6, #2563eb);
    border-radius: var(--card-radius);
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: var(--shadow);
  }

  .welcome-content h1 {
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: white;
  }

  .welcome-content p {
    font-size: 1.1rem;
    color: rgba(255, 255, 255, 0.9);
    margin: 0;
  }

  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(340px, 1fr));
    gap: 2rem;
    width: 100%;
    max-width: 1400px;
    margin: 2rem auto 0 auto;
  }

  .dashboard-card {
    background: var(--background-secondary);
    border-radius: var(--card-radius);
    box-shadow: var(--shadow);
    padding: 2.2rem 2rem 1.7rem 2rem;
    margin-bottom: 0.7rem;
  }

  .card-title {
    font-size: 1.3rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 1.2rem;
    letter-spacing: 0.01em;
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.2rem;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    background: var(--background-tertiary);
    border-radius: 1em;
    padding: 1.2em 0.5em;
    box-shadow: none;
    border: 1px solid var(--border-color);
    margin-bottom: 0.5em;
  }

  .stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 0.3rem;
  }

  .stat-label {
    font-size: 0.9rem;
    color: var(--text-secondary);
  }

  .dashboard-search-bar {
    margin-bottom: 1.2rem;
  }

  .dashboard-search-input {
    width: 100%;
    padding: 0.8rem 1rem;
    border-radius: 0.5rem;
    border: 1px solid var(--border-color);
    background: var(--background-tertiary);
    color: var(--text-primary);
    font-size: 0.95rem;
  }

  .dashboard-search-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.2);
  }

  .recent-loans {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
  }

  .loan-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.1rem 1rem;
    background: var(--background-tertiary);
    border-radius: 1em;
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    transition: background 0.2s;
  }

  .loan-item:hover {
    background: #232f3e;
  }

  .loan-info {
    display: flex;
    flex-direction: column;
  }

  .loan-device {
    font-weight: 700;
    color: var(--text-primary);
    font-size: 1.1rem;
  }

  .loan-supervisor {
    font-size: 0.95rem;
    color: var(--text-secondary);
  }

  .loan-date {
    font-size: 0.95rem;
    color: #888;
    font-weight: 500;
  }

  .alerts-list {
    display: flex;
    flex-direction: column;
    gap: 1.2rem;
  }

  .alert-item {
    display: flex;
    align-items: center;
    padding: 1.1rem 1rem;
    border-radius: 1em;
    gap: 1.2rem;
    background: var(--background-tertiary);
    border: 1px solid var(--border-color);
    box-shadow: none;
    color: var(--text-primary);
  }

  .alert-warning {
    border-left: 4px solid var(--warning);
  }

  .alert-danger {
    border-left: 4px solid var(--danger);
  }

  .alert-info {
    border-left: 4px solid var(--info);
  }

  .alert-success {
    border-left: 4px solid var(--success);
  }

  .alert-icon {
    width: 2rem;
    height: 2rem;
    border-radius: 9999px;
  }

  .alert-warning .alert-icon {
    background-color: var(--warning);
  }

  .alert-danger .alert-icon {
    background-color: var(--danger);
  }

  .alert-info .alert-icon {
    background-color: var(--info);
  }

  .alert-success .alert-icon {
    background-color: var(--success);
  }

  .alert-content {
    display: flex;
    flex-direction: column;
  }

  .alert-title {
    font-weight: 700;
    font-size: 1rem;
    margin-bottom: 0.2rem;
  }

  .alert-message {
    font-size: 0.95rem;
    color: var(--text-secondary);
  }

  .card-actions {
    margin-top: 1.5rem;
    text-align: center;
  }

  .btn-link {
    color: #3b82f6;
    font-size: 0.95rem;
    font-weight: 500;
    text-decoration: none;
  }

  .btn-link:hover {
    text-decoration: underline;
  }

  .no-data {
    padding: 2rem;
    text-align: center;
    color: var(--text-secondary);
    font-style: italic;
    background: var(--background-tertiary);
    border-radius: 1em;
    border: 1px solid var(--border-color);
  }
</style>

<script>
  // Filtrado de préstamos en tiempo real
  const searchInput = document.getElementById("dashboardLoanSearch");
  const loanItems = document.querySelectorAll(
    "#dashboardRecentLoans .loan-item"
  );
  const noLoansMsg = document.getElementById("dashboardNoLoansMsg");

  if (searchInput) {
    searchInput.addEventListener("input", function () {
      const searchTerm = this.value.toLowerCase();
      let visibleCount = 0;

      loanItems.forEach((item) => {
        const device = item.getAttribute("data-device")?.toLowerCase() || "";
        const supervisor =
          item.getAttribute("data-supervisor")?.toLowerCase() || "";

        if (device.includes(searchTerm) || supervisor.includes(searchTerm)) {
          item.style.display = "flex";
          visibleCount++;
        } else {
          item.style.display = "none";
        }
      });

      if (noLoansMsg) {
        noLoansMsg.style.display = visibleCount === 0 ? "block" : "none";
      }
    });
  }
</script>
